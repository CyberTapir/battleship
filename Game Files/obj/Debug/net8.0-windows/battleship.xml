<?xml version="1.0"?>
<doc>
<assembly>
<name>
battleship
</name>
</assembly>
<members>
<member name="T:battleship.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:battleship.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:battleship.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:battleship.My.Resources.Resources.HMAS_Warramunga__FFH_152__underway_in_the_Savu_Sea_on_11_December_2021__211211_N_NO250_1004_">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="F:battleship.frmGame.playerBoardArray">
 <summary>
 playerBoardArray is a control array of pictureboxes. They handle the player view of the board (ships, hits and misses made by opponent)
 </summary>
</member>
<member name="F:battleship.frmGame.playerBoard">
 <summary>
 playerBoard will store important information such as hits, misses and ships for the player
 </summary>
</member>
<member name="F:battleship.frmGame.opponentBoardArray">
 <summary>
 opponentBoardArray is a control array of pictureboxes. This handles the player view of the opponents board (hits and misses)
 </summary>
</member>
<member name="F:battleship.frmGame.opponentBoard">
 <summary>
 opponentBoard will store important information such as hits, misses and ships for the computer or second player
 </summary>
</member>
<member name="F:battleship.frmGame.playerShips">
 <summary>
 PlayerShips stores the total number of ship sections that have not been hit. When this reaches 0, the game is over.
 </summary>
</member>
<member name="F:battleship.frmGame.opponentShips">
 <summary>
 OpponentShips stores the total number of ship sections that have not been hit. When this reaches 0, the game is over.
 </summary>
</member>
<member name="F:battleship.frmGame.impossibleMoveCounter">
 <summary>
 Counter for the impossible game level and hard game level. Impossible counts 1-17, hard counts 1 to 50
 </summary>
</member>
<member name="F:battleship.frmGame.canMakeMove">
 <summary>
 Flag to stop the player from making a move when the computer is, or the player is setting their ships.
 </summary>
</member>
<member name="F:battleship.frmGame.playerCarrier">
 <summary>
 Create a record for each player ship of type ship
 </summary>
</member>
<member name="F:battleship.frmGame.opponentCarrier">
 <summary>
 Create a record of type ship for each opponent ship
 </summary>
</member>
<member name="T:battleship.frmGame.ship">
 <summary>
 Define record as ship. Properties length (integer to store ship length), and sunk (true or false)
 </summary>
</member>
<member name="T:battleship.frmGame.sinkProgress">
 <summary>
 Create record sinkProgress
 </summary>
</member>
<member name="F:battleship.frmGame.mediumSinkProgress">
 <summary>
 Create a variable of type sinkProgress 
 </summary>
</member>
<member name="M:battleship.frmGame.frmGame_Load(System.Object,System.EventArgs)">
 <summary>
 This subroutine is run once when the form is first loaded. This is best for setting up control structures before the game starts.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:battleship.frmGame.initialiseControlArray">
 <summary>
 Create two two-dimentional control arrays, one per board
 </summary>
</member>
<member name="M:battleship.frmGame.setShips">
 <summary>
 Before the game starts, set the ship locations on the board.
 </summary>
</member>
<member name="M:battleship.frmGame.placeShips(System.Int32[0:,0:]@)">
 <summary>
 Place the ships on the board in a random manner
 </summary>
 <param name="board">The board for the ships to be placed on</param>
</member>
<member name="M:battleship.frmGame.CanPlaceShip(System.Int32[0:,0:]@,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Verify the ships do not overlap or fall off the board
 </summary>
 <param name="board">The board to check</param>
 <param name="x">Initial X value</param>
 <param name="y">Initial Y value</param>
 <param name="length">Length of the ship to be placed</param>
 <param name="orientation">Orientation of the ship to be placed</param>
 <returns>True/False. True if can be placed, false if not</returns>
</member>
<member name="M:battleship.frmGame.reset">
 <summary>
 Reset the board for a new game
 </summary>
</member>
<member name="M:battleship.frmGame.clearPictureBoxes">
 <summary>
 Clear each of the picture boxes by using two for loops.
 This is run to reset the board once the player returns to the starting form in preparation for a potential second game
 </summary>
</member>
<member name="M:battleship.frmGame.isGameOver">
 <summary>
 Function to verify if the game is won/lost
 </summary>
 <returns>True/False depending on whether the game is won</returns>
</member>
<member name="M:battleship.frmGame.picOpp_Click(System.Object,System.EventArgs)">
 <summary>
 On click of Opponent grid, launch an attack and change the colour appropriately
 </summary>
 <param name="sender">The clicked PictureBox as PictureBox</param>
 <param name="e"></param>
</member>
<member name="M:battleship.frmGame.getXCoords(System.String)">
 <summary>
 getCoords takes in a sender picturebox name (such as picOppA3) and return the appropriate number value for the letter
 </summary>
 <param name="str">Sender as type string</param>
 <returns>X Coordinate as type integer</returns>
</member>
<member name="M:battleship.frmGame.getYCoords(System.String)">
 <summary>
 Gets the y value from a sender string
 </summary>
 <param name="str">Sender name, eg picPlayerA6</param>
 <returns>Integer column number</returns>
</member>
<member name="M:battleship.frmGame.getComputerLevel">
 <summary>
 Retrieve the set computerlevel and return the correct subroutine.
 </summary>
</member>
<member name="M:battleship.frmGame.easyComputerMove">
 <summary>
 In the easiest computer mode, the computer guesses random squares.
 </summary>
</member>
<member name="M:battleship.frmGame.mediumComputerMove">
 <summary>
 Computer makes a guess, if its a hit it tries around to find the entire ship
 </summary>
</member>
<member name="M:battleship.frmGame.resetMediumHitProgress">
 <summary>
 once ship sunk, or no directions left, reset for next ship
 </summary>
</member>
<member name="M:battleship.frmGame.hardComputerMove">
 <summary>
 Computer makes more educated guesses 
 </summary>
</member>
<member name="M:battleship.frmGame.unfairComputerMove">
 <summary>
 Computer makes a move knowing exactly where the playerships are
 </summary>
</member>
<member name="M:battleship.frmGame.GetPlayerBoardArray">
 <summary>
 Return the playerBoardArray
 </summary>
 <returns>Returns the playerBoardArray</returns>
</member>
<member name="M:battleship.frmGame.doComputerMove(System.Int32,System.Int32,System.Windows.Forms.PictureBox[0:,0:])">
 <summary>
 Do the computer move on the displayed board
 </summary>
 <param name="XCoord">Input X Coordinate</param>
 <param name="YCoord">Input Y Coordinate</param>
 <param name="playerBoardArray">Input the grid to update</param>
</member>
<member name="M:battleship.frmGame.getRandomNum(System.Int32)">
 <summary>
 Generate a random number based on an upper bound
 </summary>
 <param name="upper">upper bound</param>
 <returns>random number</returns>
</member>
<member name="M:battleship.frmGame.delay(System.Int32)">
 <summary>
 Delay action taken so computer move is not instant, and for flashing the guessed coordinate
 </summary>
 <param name="interval">How long the delay is in ms as type integer</param>
</member>
<member name="M:battleship.frmGame.checkForSunkShips">
 <summary>
 Check for sunk ships based on record of ship lengths. Update whether it is sunk accordingly
 </summary>
</member>
<member name="M:battleship.frmGame.btnShuffleShips_Click(System.Object,System.EventArgs)">
 <summary>
 Let the player choose where they wish their ships to be.
 </summary>
 <param name="sender">Button</param>
 <param name="e">On button event</param>
</member>
<member name="M:battleship.frmGame.btnStartGame_Click(System.Object,System.EventArgs)">
 <summary>
 Once the player is satisfied with ship placement, set the ships and start the game
 </summary>
 <param name="sender">Button</param>
 <param name="e">On button event</param>
</member>
<member name="M:battleship.frmGameEnd.frmGameEnd_Load(System.Object,System.EventArgs)">
 <summary>
 On form load mainline. Display scores, and update the scores in the file
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="T:battleship.frmGameEnd.recHighScore">
 <summary>
 Record for storing high scores. Includes name and score field
 </summary>
</member>
<member name="M:battleship.frmGameEnd.BubbleSort">
 <summary>
 Bubble sort items in arrHighScores by score descending.
 </summary>
</member>
<member name="M:battleship.frmGameEnd.Swap(battleship.frmGameEnd.recHighScore@,battleship.frmGameEnd.recHighScore@)">
 <summary>
 Swap recHighScore values
 </summary>
 <param name="a">recHighScore Value</param>
 <param name="b">recHighScore Value</param>
</member>
<member name="M:battleship.frmGameEnd.readHighScores">
 <summary>
 Read high scores and import them to arrHighScores
 </summary>
</member>
<member name="M:battleship.frmGameEnd.writeScore">
 <summary>
 write the updated new scores to the file.
 </summary>
</member>
<member name="M:battleship.frmGameEnd.btnPlayAgain_Click(System.Object,System.EventArgs)">
 <summary>
 If the player clicks play again, show the starting form
 </summary>
 <param name="sender">Button</param>
 <param name="e">On button event</param>
</member>
<member name="M:battleship.frmStart.btnStart_Click(System.Object,System.EventArgs)">
 <summary>
 When btnStart is clicked, start game
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:battleship.frmStart.verifyName(System.String)">
 <summary>
 Verify the length of the name is acceptable
 </summary>
 <param name="name">input name as string</param>
 <returns>Output boolean if true</returns>
</member>
</members>
</doc>
